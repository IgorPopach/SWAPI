{"version":3,"sources":["services/http.js","utils/setIdentifier.js","store/actions/categoriesActions.js","store/actions/urlDataActions.js","components/Tabs.js","store/actions/searchActions.js","components/Header.js","components/Home.js","models/films.js","models/people.js","models/planets.js","models/species.js","models/vehicles.js","models/starships.js","utils/converter.js","components/Pagination.js","components/Table.js","components/DetalInfo.js","components/Spinner.js","components/Button.js","containers/PageView.js","components/Films.js","components/People.js","components/Planets.js","components/Species.js","components/Starships.js","components/Vehicles.js","router/router.js","containers/App.js","serviceWorker.js","store/reducers/categoriesReducer.js","store/reducers/searchReducer.js","store/reducers/urlDataReducer.js","store/index.js","index.js"],"names":["Methods","makeRequest","method","url","params","body","extras","URL","names","Object","keys","length","map","key","join","toQuery","config","JSON","stringify","getConfig","fetch","then","response","ok","contentType","headers","get","includes","json","text","Promise","reject","Error","parseResponse","error","status","message","statusText","onRequestError","service","post","data","path","arr","split","find","e","storeLinkData","category","type","payload","fetchDataEpic","identifier","dispatch","console","log","http","checkedUrlInDataValues","results","item","replace","id","setIdentifier","res","storeUrlData","name","title","newObj","all","storeData","catch","err","fetchLinksDataEpic","urls","a","push","React","memo","list","onClick","className","el","link","activeClassName","to","toUpperCase","storeSearch","value","categories","search","useSelector","useState","searchValue","setSearchValue","useDispatch","useMemo","onClearSearch","useEffect","placeholder","onChange","target","setTimeout","FilmTableInfo","episode","release","this","FilmDetailsLinks","characters","planets","starships","vehicles","species","FilmDetailsInfo","producer","director","description","PeopleTableInfo","gender","birth_year","PeopleDetailsLinks","films","PeopleDetailsInfo","homeworld","height","mass","hair_color","skin_color","eye_color","eyes_color","PlanetTableInfo","population","terrain","climate","PlanetDetailsInfo","rotation_period","orbital_period","diameter","surface_water","gravity","PlanetDetailsLinks","residents","SpeciesTableInfo","classification","language","SpeciesDetailsInfo","designation","average_lifespan","average_height","skin_colors","hair_colors","eye_colors","SpeciesDetailsLinks","people","VehiclesTableInfo","model","manufacturer","cost_in_credits","vehicle_class","VehiclesDetailsInfo","max_atmosphering_speed","crew","passengers","cargo_capacity","consumables","VehiclesDetailsLinks","pilots","StarshipsTableInfo","starship_class","StarshipsDetailsInfo","hyperdrive_rating","MGLT","StarshipsDetailsLinks","CATEGORIES","paginationInfo","onChangeList","linksNumbers","numbers","previous","num","concat","clickPrevHandler","useCallback","clickNextHandler","next","aria-hidden","bind","style","Table","tableData","onViewDetails","sortTableByKey","tableInfo","index","row","DetailInfo","detailInfo","onClickListLinks","onlickHandler","info","links","Spinner","Button","children","isLoading","setIsLoading","setError","categoriesData","setCategory","categoryData","setCategoryData","setPaginationInfo","setTableData","setDetailInfo","loadLinksData","loadData","episode_id","release_date","convertTableInfo","count","currentItem","opening_crawl","convertDetailInfo","page","sortedData","sort","b","Films","match","People","Planets","Species","StarShips","Vehicles","exact","component","Home","Starships","loadCategories","Boolean","window","location","hostname","initialState","linksData","rootReducer","combineReducers","state","urlData","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e20a9b54.chunk.js","sourcesContent":["const Methods = {\r\n    GET: 'GET',\r\n    POST: 'POST',\r\n}\r\n\r\nexport const BASE_URL = 'https://swapi.dev/api/';\r\n\r\nfunction toQuery(params) {\r\n    const names = params ? Object.keys(params) : [];\r\n    if (names.length) {\r\n        return '?' + names.map((key) => `${key}=${params[key]}`).join('&');\r\n    }\r\n    return '';\r\n}\r\n\r\nfunction parseResponse(response) {\r\n    const contentType = response.headers.get('content-type');\r\n\r\n    if (contentType.includes('application/json')) {\r\n        return response.json();\r\n    }\r\n    if (contentType.includes('text/html')) {\r\n        return response.text().then((text) => ({ text }));\r\n    }\r\n    return Promise.reject(new Error(`Can't process this response type: ${contentType}`));\r\n}\r\n\r\nfunction onRequestError(response) {\r\n    const error = new Error(\r\n        JSON.stringify({\r\n            status: response.status,\r\n            message: response.statusText,\r\n        }),\r\n    );\r\n    return Promise.reject(error);\r\n}\r\n\r\nfunction getConfig(method, extras = {}, body) {\r\n    const config = {\r\n        ...extras,\r\n        method,\r\n    };\r\n    if (body) {\r\n        config.body = JSON.stringify(body);\r\n    }\r\n    return config;\r\n}\r\n\r\nfunction makeRequest(\r\n    method,\r\n    url,\r\n    params,\r\n    body,\r\n    extras,\r\n) {\r\n    const URL = `${url}${toQuery(params)}`;\r\n    const config = getConfig(method, extras, body);\r\n    return fetch(URL, config).then((response) => {\r\n        if (response.ok) {\r\n            return parseResponse(response);\r\n        }\r\n        return onRequestError(response);\r\n    });\r\n}\r\n\r\nconst service = {\r\n    get: (url, params) => makeRequest(Methods.GET, url, params),\r\n    post: (url, data, params) => makeRequest(Methods.POST, url, params, data),\r\n};\r\n\r\nexport default service;","export default (path) => {\r\n    const arr = path.split('/');\r\n    if (arr.length === 2) {\r\n        return arr.find(e => e !== '');\r\n    }\r\n    return arr[4];\r\n};","import http, { BASE_URL } from '../../services/http';\r\nimport { storeUrlData } from './urlDataActions';\r\nimport setIdentifier from '../../utils/setIdentifier';\r\n\r\nexport const STORE_CATEGORIES = 'STORE_CATEGORIES';\r\nexport const STORE_DATA = 'STORE_DATA';\r\nexport const STORE_LINK_DATA = 'STORE_LINK_DATA';\r\n\r\nconst storeCategories = (data) => ({\r\n    type: STORE_CATEGORIES,\r\n    payload: data\r\n});\r\n\r\nconst storeData = (category, data) => ({\r\n    type: STORE_DATA,\r\n    payload: {\r\n        category,\r\n        data\r\n    }\r\n});\r\n\r\nconst storeLinkData = (category, data) => ({\r\n    type: STORE_LINK_DATA,\r\n    payload: {\r\n        category,\r\n        data\r\n    }\r\n});\r\n\r\nexport const fetchCategoriesEpic = () => dispatch => {\r\n    http.get(BASE_URL)\r\n        .then(res => {\r\n            dispatch(storeCategories(res))\r\n        })\r\n        .catch(err => {\r\n            throw new Error('Something went wrong')\r\n        }\r\n        );\r\n};\r\n\r\nexport const fetchDataEpic = (identifier, params) => dispatch => {\r\n    console.log('fetch', identifier, params);\r\n    http.get(`${BASE_URL}${identifier}/`, params)\r\n        .then(response => {\r\n            const checkedUrlInDataValues = response.results.map(item => {\r\n                for (const key of Object.keys(item)) {\r\n                    if (key !== 'url' && typeof (item[key]) === 'string' && item[key].includes('http:')) {\r\n                        const url = item[key].replace('http:', 'https:');\r\n                        const id = setIdentifier(url);\r\n                        return http.get(url)\r\n                            .then(res => {\r\n                                dispatch(storeUrlData(id, url, res));\r\n                                let response;\r\n                                if (res.name) {\r\n                                    response = res.name;\r\n                                }\r\n                                if (res.title) {\r\n                                    response = res.title;\r\n                                }\r\n                                const newObj = { ...item };\r\n                                newObj[key] = response;\r\n                                return newObj;\r\n                            })\r\n                    }\r\n                }\r\n                return item;\r\n            });\r\n            return Promise.all(checkedUrlInDataValues)\r\n                .then(res => {\r\n                    const data = {\r\n                        ...response,\r\n                        results: res\r\n                    };\r\n                    dispatch(storeData(identifier, data));\r\n                })\r\n                .catch(err => {\r\n                    throw new Error('Something went wrong')\r\n                })\r\n        })\r\n};\r\n\r\nexport const fetchLinksDataEpic = (identifier, urls) => async dispatch => {\r\n    let data = [];\r\n    for (const url of urls) {\r\n        const res = await http.get(url);\r\n        data.push(res);\r\n    }\r\n    dispatch(storeLinkData(identifier, data));\r\n    return data;\r\n}","export const STORE_URL_DATA = 'STORE_URL_DATA';\r\n\r\nexport const storeUrlData = (category, id, data) => ({\r\n    type: STORE_URL_DATA,\r\n    payload: {\r\n        category,\r\n        id,\r\n        data\r\n    }\r\n});","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Tabs = ({ list, onClick }) => {\r\n\r\n    return (\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n                {list.map(el => (\r\n                    <li key={el.link} className=\"nav-item\">\r\n                        <NavLink\r\n                            className=\"nav-link\"\r\n                            activeClassName=\"active\"\r\n                            to={el.link}\r\n                            {...{ onClick }}\r\n                        >\r\n                            {el.title.toUpperCase()}\r\n                        </NavLink>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Tabs);","export const STORE_SEARCH = 'STORE_SEARCH';\r\n\r\nexport const storeSearch = (value) => ({\r\n    type: STORE_SEARCH,\r\n    payload: value\r\n});","import React, { useMemo, useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Tabs from './Tabs';\r\nimport { storeSearch } from '../store/actions/searchActions';\r\n\r\nconst Header = ({ categories }) => {\r\n    const search = useSelector(({ search }) => search.search);\r\n    const [searchValue, setSearchValue] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const list = useMemo(() => {\r\n        if (!categories) {\r\n            return;\r\n        }\r\n        return Object.keys(categories).map(key => ({\r\n            title: key,\r\n            link: `/${key}`\r\n        }))\r\n    }, [categories]);\r\n\r\n    const onChangeHandler = ({ target }) => {\r\n        setSearchValue(target.value);\r\n        setTimeout(() => dispatch(storeSearch(target.value)), 1000);\r\n    };\r\n\r\n    const onClearSearch = () => {\r\n        setSearchValue('');\r\n        dispatch(storeSearch(''));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (search === '') {\r\n            setSearchValue('');\r\n        }\r\n    }, [dispatch, search]);\r\n\r\n    return (\r\n        <header>\r\n            <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\r\n                <Link className=\"navbar-brand\" to='/home'>Star Wars Data</Link>\r\n                {list && <Tabs {...{ list }} onClick={onClearSearch} />}\r\n                <div className=\"form-inline my-2 my-lg-0\">\r\n                    <input\r\n                        className=\"form-control mr-sm-2\"\r\n                        type=\"text\"\r\n                        placeholder=\"Search\"\r\n                        value={searchValue}\r\n                        onChange={onChangeHandler}\r\n                    />\r\n                    <button\r\n                        className=\"btn btn-outline-success my-2 my-sm-0\"\r\n                        type=\"button\"\r\n                        onClick={onClearSearch}\r\n                    >\r\n                        Clear\r\n                </button>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default React.memo(Header);","import React, { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Tabs from './Tabs';\r\n\r\nconst Home = () => {\r\n    const categories = useSelector(({ categories }) => categories.categories);\r\n\r\n    const list = useMemo(() => {\r\n        if (!categories) {\r\n            return;\r\n        }\r\n        return Object.keys(categories).map(key => ({\r\n            title: key,\r\n            link: `/${key}`\r\n        }))\r\n    }, [categories]);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>Welcome to the STAR WARS DATA!</h2>\r\n            <p>I hope you'll be enjoy here :)</p>\r\n            <p>Please select a CATEGORY:</p>\r\n            <nav className=\"navbar navbar-expand-md navbar-dark\">\r\n                {list && <Tabs {...{ list }} />}\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Home);","export class FilmTableInfo {\r\n    constructor(name, episode, release) {\r\n        this.name = name;\r\n        this.episode = episode;\r\n        this.release = release;\r\n    }\r\n};\r\n\r\nexport class FilmDetailsLinks {\r\n    constructor(characters, planets, starships, vehicles, species) {\r\n        this.characters = characters;\r\n        this.planets = planets;\r\n        this.starships = starships;\r\n        this.vehicles = vehicles;\r\n        this.species = species;\r\n    }\r\n};\r\n\r\nexport class FilmDetailsInfo {\r\n    constructor(name, episode, release, producer, director, description) {\r\n        this.name = name;\r\n        this.episode = episode;\r\n        this.release = release;\r\n        this.producer = producer;\r\n        this.director = director;\r\n        this.description = description;\r\n    }\r\n};","export class PeopleTableInfo {\r\n    constructor(name, gender, birth_year) {\r\n        this.name = name;\r\n        this.gender = gender;\r\n        this.birth_year = birth_year;\r\n    }\r\n};\r\n\r\nexport class PeopleDetailsLinks {\r\n    constructor(films, starships, vehicles, species) {\r\n        this.films = films;\r\n        this.starships = starships;\r\n        this.vehicles = vehicles;\r\n        this.species = species;\r\n    }\r\n};\r\n\r\nexport class PeopleDetailsInfo {\r\n    constructor(name, gender, birth_year, homeworld, height, mass, hair_color, skin_color, eye_color) {\r\n        this.name = name;\r\n        this.gender = gender;\r\n        this.birth_year = birth_year;\r\n        this.homeworld = homeworld;\r\n        this.height = height;\r\n        this.mass = mass;\r\n        this.hair_color = hair_color;\r\n        this.skin_color = skin_color;\r\n        this.eyes_color = eye_color;\r\n    }\r\n};","export class PlanetTableInfo {\r\n    constructor(name, population, terrain, climate) {\r\n        this.name = name;\r\n        this.population = population;\r\n        this.terrain = terrain;\r\n        this.climate = climate;\r\n    }\r\n};\r\n\r\nexport class PlanetDetailsInfo {\r\n    constructor(\r\n        name,\r\n        population,\r\n        terrain,\r\n        climate,\r\n        rotation_period,\r\n        orbital_period,\r\n        diameter,\r\n        surface_water,\r\n        gravity\r\n    ) {\r\n        this.name = name;\r\n        this.population = population;\r\n        this.terrain = terrain;\r\n        this.climate = climate;\r\n        this.rotation_period = rotation_period;\r\n        this.orbital_period = orbital_period;\r\n        this.diameter = diameter;\r\n        this.surface_water = surface_water;\r\n        this.gravity = gravity;\r\n    }\r\n};\r\n\r\nexport class PlanetDetailsLinks {\r\n    constructor(films, residents) {\r\n        this.films = films;\r\n        this.residents = residents;\r\n    }\r\n};","export class SpeciesTableInfo {\r\n    constructor(name, classification, homeworld, language) {\r\n        this.name = name;\r\n        this.classification = classification;\r\n        this.homeworld = homeworld;\r\n        this.language = language;\r\n    }\r\n};\r\n\r\nexport class SpeciesDetailsInfo {\r\n    constructor(\r\n        name,\r\n        classification,\r\n        homeworld,\r\n        language,\r\n        designation,\r\n        average_lifespan,\r\n        average_height,\r\n        skin_colors,\r\n        hair_colors,\r\n        eye_colors\r\n    ) {\r\n        this.name = name;\r\n        this.classification = classification;\r\n        this.homeworld = homeworld;\r\n        this.language = language;\r\n        this.designation = designation;\r\n        this.average_lifespan = average_lifespan;\r\n        this.average_height = average_height;\r\n        this.skin_colors = skin_colors;\r\n        this.hair_colors = hair_colors;\r\n        this.eye_colors = eye_colors;\r\n    }\r\n};\r\n\r\nexport class SpeciesDetailsLinks {\r\n    constructor(people, films) {\r\n        this.people = people;\r\n        this.films = films;\r\n    }\r\n};","export class VehiclesTableInfo {\r\n    constructor(name, model, manufacturer, cost_in_credits, vehicle_class) {\r\n        this.name = name;\r\n        this.model = model;\r\n        this.manufacturer = manufacturer;\r\n        this.cost_in_credits = cost_in_credits;\r\n        this.vehicle_class = vehicle_class;\r\n    }\r\n};\r\n\r\nexport class VehiclesDetailsInfo {\r\n    constructor(\r\n        name,\r\n        model,\r\n        cost_in_credits,\r\n        vehicle_class,\r\n        manufacturer,\r\n        length,\r\n        max_atmosphering_speed,\r\n        crew,\r\n        passengers,\r\n        cargo_capacity,\r\n        consumables\r\n    ) {\r\n        this.name = name;\r\n        this.model = model;\r\n        this.manufacturer = manufacturer;\r\n        this.cost_in_credits = cost_in_credits;\r\n        this.vehicle_class = vehicle_class;\r\n        this.length = length;\r\n        this.max_atmosphering_speed = max_atmosphering_speed;\r\n        this.crew = crew;\r\n        this.passengers = passengers;\r\n        this.cargo_capacity = cargo_capacity;\r\n        this.consumables = consumables;\r\n    }\r\n};\r\n\r\nexport class VehiclesDetailsLinks {\r\n    constructor(pilots, films) {\r\n        this.pilots = pilots;\r\n        this.films = films;\r\n    }\r\n};","export class StarshipsTableInfo {\r\n    constructor(name, model, manufacturer, starship_class, cost_in_credits) {\r\n        this.name = name;\r\n        this.model = model;\r\n        this.manufacturer = manufacturer;\r\n        this.starship_class = starship_class;\r\n        this.cost_in_credits = cost_in_credits;\r\n    }\r\n};\r\n\r\nexport class StarshipsDetailsInfo {\r\n    constructor(\r\n        name,\r\n        model,\r\n        manufacturer,\r\n        starship_class,\r\n        cost_in_credits,\r\n        length,\r\n        max_atmosphering_speed,\r\n        crew,\r\n        passengers,\r\n        cargo_capacity,\r\n        consumables,\r\n        hyperdrive_rating,\r\n        MGLT\r\n    ) {\r\n        this.name = name;\r\n        this.model = model;\r\n        this.manufacturer = manufacturer;\r\n        this.starship_class = starship_class;\r\n        this.cost_in_credits = cost_in_credits;\r\n        this.length = length;\r\n        this.max_atmosphering_speed = max_atmosphering_speed;\r\n        this.crew = crew;\r\n        this.passengers = passengers;\r\n        this.cargo_capacity = cargo_capacity;\r\n        this.consumables = consumables;\r\n        this.hyperdrive_rating = hyperdrive_rating;\r\n        this.MGLT = MGLT;\r\n    }\r\n};\r\n\r\nexport class StarshipsDetailsLinks {\r\n    constructor(pilots, films) {\r\n        this.pilots = pilots;\r\n        this.films = films;\r\n    }\r\n};","import { FilmDetailsInfo, FilmDetailsLinks, FilmTableInfo } from '../models/films';\r\nimport { PeopleDetailsInfo, PeopleDetailsLinks, PeopleTableInfo } from '../models/people';\r\nimport { PlanetDetailsInfo, PlanetDetailsLinks, PlanetTableInfo } from '../models/planets';\r\nimport { SpeciesDetailsInfo, SpeciesDetailsLinks, SpeciesTableInfo } from '../models/species';\r\nimport { VehiclesDetailsInfo, VehiclesTableInfo, VehiclesDetailsLinks } from '../models/vehicles';\r\nimport { StarshipsDetailsInfo, StarshipsDetailsLinks, StarshipsTableInfo } from '../models/starships';\r\n\r\nconst CATEGORIES = {\r\n    FILMS: 'films',\r\n    PEOPLE: 'people',\r\n    PLANETS: 'planets',\r\n    SPECIES: 'species',\r\n    VEHICLES: 'vehicles',\r\n    STARSHIPS: 'starships'\r\n}\r\n\r\nexport const convertDetailInfo = (identifier, data) => {\r\n    switch (identifier) {\r\n        case CATEGORIES.FILMS:\r\n            return {\r\n                info: new FilmDetailsInfo(\r\n                    data.title,\r\n                    data.episode_id,\r\n                    data.release_date,\r\n                    data.producer,\r\n                    data.director,\r\n                    data.opening_crawl\r\n                ),\r\n                links: new FilmDetailsLinks(\r\n                    data.characters,\r\n                    data.planets,\r\n                    data.starships,\r\n                    data.vehicles,\r\n                    data.species\r\n                )\r\n            };\r\n        case CATEGORIES.PEOPLE:\r\n            return {\r\n                info: new PeopleDetailsInfo(\r\n                    data.name,\r\n                    data.gender,\r\n                    data.birth_year,\r\n                    data.homeworld,\r\n                    data.height,\r\n                    data.mass,\r\n                    data.hair_color,\r\n                    data.skin_color,\r\n                    data.eye_color\r\n                ),\r\n                links: new PeopleDetailsLinks(\r\n                    data.films,\r\n                    data.starships,\r\n                    data.vehicles,\r\n                    data.species\r\n                )\r\n            }\r\n        case CATEGORIES.PLANETS:\r\n            return {\r\n                info: new PlanetDetailsInfo(\r\n                    data.name,\r\n                    data.population,\r\n                    data.terrain,\r\n                    data.climate,\r\n                    data.rotation_period,\r\n                    data.orbital_period,\r\n                    data.diameter,\r\n                    data.surface_water,\r\n                    data.gravity\r\n                ),\r\n                links: new PlanetDetailsLinks(\r\n                    data.films,\r\n                    data.residents,\r\n                )\r\n            }\r\n        case CATEGORIES.SPECIES:\r\n            return {\r\n                info: new SpeciesDetailsInfo(\r\n                    data.name,\r\n                    data.classification,\r\n                    data.homeworld,\r\n                    data.language,\r\n                    data.designation,\r\n                    data.average_lifespan,\r\n                    data.average_height,\r\n                    data.skin_colors,\r\n                    data.hair_colors,\r\n                    data.eye_colors\r\n                ),\r\n                links: new SpeciesDetailsLinks(\r\n                    data.people,\r\n                    data.films,\r\n                )\r\n            }\r\n        case CATEGORIES.VEHICLES:\r\n            return {\r\n                info: new VehiclesDetailsInfo(\r\n                    data.name,\r\n                    data.model,\r\n                    data.cost_in_credits,\r\n                    data.vehicle_class,\r\n                    data.manufacturer,\r\n                    data.length,\r\n                    data.max_atmosphering_speed,\r\n                    data.crew,\r\n                    data.passengers,\r\n                    data.cargo_capacity,\r\n                    data.consumables\r\n                ),\r\n                links: new VehiclesDetailsLinks(\r\n                    data.pilots,\r\n                    data.films,\r\n                )\r\n            }\r\n        case CATEGORIES.STARSHIPS:\r\n            return {\r\n                info: new StarshipsDetailsInfo(\r\n                    data.name,\r\n                    data.model,\r\n                    data.manufacturer,\r\n                    data.starship_class,\r\n                    data.cost_in_credits,\r\n                    data.length,\r\n                    data.max_atmosphering_speed,\r\n                    data.crew,\r\n                    data.passengers,\r\n                    data.cargo_capacity,\r\n                    data.consumables,\r\n                    data.hyperdrive_rating,\r\n                    data.MGLT\r\n                ),\r\n                links: new StarshipsDetailsLinks(\r\n                    data.pilots,\r\n                    data.films,\r\n                )\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n}\r\n\r\nexport const convertTableInfo = (identifier, data) => {\r\n    switch (identifier) {\r\n        case CATEGORIES.FILMS:\r\n            return new FilmTableInfo(data.title, data.episode_id, data.release_date);\r\n        case CATEGORIES.PEOPLE:\r\n            return new PeopleTableInfo(data.name, data.gender, data.birth_year);\r\n        case CATEGORIES.PLANETS:\r\n            return new PlanetTableInfo(data.name, data.population, data.terrain, data.climate);\r\n        case CATEGORIES.SPECIES:\r\n            return new SpeciesTableInfo(data.name, data.classification, data.homeworld, data.language);\r\n        case CATEGORIES.VEHICLES:\r\n            return new VehiclesTableInfo(data.name, data.model, data.manufacturer, data.cost_in_credits, data.vehicle_class);\r\n        case CATEGORIES.STARSHIPS:\r\n            return new StarshipsTableInfo(data.name, data.model, data.manufacturer, data.starship_class, data.cost_in_credits);\r\n        default:\r\n            return;\r\n    }\r\n}","import React, { useMemo, useCallback } from 'react';\r\n\r\nconst Pagination = ({ paginationInfo, onChangeList }) => {\r\n\r\n    const linksNumbers = useMemo(() => {\r\n        if (!paginationInfo) return;\r\n        let numbers = []\r\n        if (!paginationInfo.previous) {\r\n            numbers = [1, 2, 3]\r\n        } else {\r\n            const num = +paginationInfo.previous.split('=')[1];\r\n            numbers = numbers.concat([num, num + 1, num + 2]);\r\n        }\r\n        return numbers;\r\n    }, [paginationInfo]);\r\n\r\n    const clickPrevHandler = useCallback(() => {\r\n        if (!paginationInfo.previous) {\r\n            return;\r\n        }\r\n        onChangeList(+paginationInfo.previous.split('=')[1]);\r\n    }, [onChangeList, paginationInfo]);\r\n\r\n    const clickNextHandler = useCallback(() => {\r\n        if (!paginationInfo.next) {\r\n            return;\r\n        }\r\n        onChangeList(+paginationInfo.next.split('=')[1]);\r\n    }, [onChangeList, paginationInfo]);\r\n\r\n    if (!paginationInfo) {\r\n        return <div style={{ height: '25px', 'marginBottom': '1rem' }} ></div>\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination\">\r\n                <li\r\n                    className=\"page-item\"\r\n                    onClick={clickPrevHandler}\r\n                >\r\n                    <span className=\"page-link\">\r\n                        <span aria-hidden=\"true\">&laquo;</span>\r\n                    </span>\r\n                </li>\r\n                {linksNumbers.map(num => (\r\n                    <li\r\n                        key={num}\r\n                        className=\"page-item\"\r\n                        onClick={onChangeList.bind(this, num)}\r\n                    >\r\n                        <span className=\"page-link\">\r\n                            {num}\r\n                        </span>\r\n                    </li>\r\n                ))}\r\n                <li\r\n                    className=\"page-item\"\r\n                    onClick={clickNextHandler}\r\n                >\r\n                    <span className=\"page-link\">\r\n                        <span aria-hidden=\"true\">&raquo;</span>\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default React.memo(Pagination);","import React from 'react';\r\n\r\nimport Pagination from './Pagination';\r\n\r\nconst Table = ({ category, tableData, onViewDetails, onChangeList, paginationInfo, sortTableByKey }) => {\r\n    if (tableData.length === 0) {\r\n        return <div className=\"table-component\">\r\n            <h2>{category}</h2>\r\n            <h6>There is no data!</h6>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"table-component\">\r\n            <h2>{category}</h2>\r\n            <Pagination {...{ paginationInfo, onChangeList }} />\r\n            <table className=\"table table-dark table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        {Object.keys(tableData[0].tableInfo).map((e, index) => (\r\n                            <th\r\n                                key={index}\r\n                                onClick={sortTableByKey.bind(this, e)}\r\n                            >\r\n                                {e.toUpperCase()}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tableData.map(row => (\r\n                        <tr key={row.id} onClick={onViewDetails.bind(this, row.id)}>\r\n                            {Object.keys(row.tableInfo).map(key => (\r\n                                <td {...{ key }}>{row.tableInfo[key]}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;","import React from 'react';\r\n\r\nconst DetailInfo = ({ detailInfo, onClickListLinks }) => {\r\n\r\n    const onlickHandler = (category, link) => {\r\n        if (link.length === 0) return;\r\n        if (category === 'characters' || category === 'residents') {\r\n            category = 'people'\r\n        }\r\n        onClickListLinks(category, link);\r\n    }\r\n\r\n    return (\r\n        <div className=\"details\">\r\n            <h2>{detailInfo.info.name}</h2>\r\n            <div className=\"list-container\">\r\n                <div className=\"list-container-details\">\r\n                    <p>Details:</p>\r\n                    <ul className=\"list-group list-group-flush details-info\">\r\n                        {Object.keys(detailInfo.info).map(title => (\r\n                            <li key={title} className=\"list-group-item list-group-item-dark\">\r\n                                <h3>{title}</h3>\r\n                                <p>{detailInfo.info[title]}</p>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"list-container-links\">\r\n                    <p>Related Links:</p>\r\n                    <ul className=\"list-group details-links\">\r\n                        {Object.keys(detailInfo.links).map(category => (\r\n                            <li\r\n                                key={category}\r\n                                className=\"list-group-item d-flex justify-content-between list-group-item-dark\"\r\n                                onClick={onlickHandler.bind(this, category, detailInfo.links[category])}\r\n                            >\r\n                                <h3>{category}</h3>\r\n                                <span className=\"badge badge-primary badge-pill\">{detailInfo.links[category].length}</span>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DetailInfo;","import React from 'react';\r\n\r\nconst Spinner = () => (\r\n    <div className=\"spinner\">\r\n        <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n    </div>\r\n);\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\nconst Button = ({ children, onClick }) => (\r\n    <button {...{ onClick }} type=\"button\" className=\"btn btn btn-outline-light\">{children}</button>\r\n);\r\n\r\nexport default Button;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { fetchDataEpic, fetchLinksDataEpic } from '../store/actions/categoriesActions';\r\nimport { convertTableInfo, convertDetailInfo } from '../utils/converter';\r\nimport Table from '../components/Table';\r\nimport DetailInfo from '../components/DetalInfo';\r\nimport Spinner from '../components/Spinner';\r\nimport Button from '../components/Button';\r\nimport { storeSearch } from '../store/actions/searchActions';\r\n\r\nconst PageView = ({ url, identifier }) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    const categoriesData = useSelector(({ categories }) => categories.data);\r\n    const search = useSelector(({ search }) => search.search);\r\n\r\n    const [category, setCategory] = useState(identifier);\r\n    const [categoryData, setCategoryData] = useState(null);\r\n    const [paginationInfo, setPaginationInfo] = useState(null);\r\n    const [tableData, setTableData] = useState(null);\r\n    const [detailInfo, setDetailInfo] = useState(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onViewDetails = (id) => {\r\n        const currentItem = categoryData.find(item => item.url === id);\r\n        setDetailInfo(convertDetailInfo(category, currentItem));\r\n    }\r\n\r\n    const sortTableByKey = (key) => {\r\n        const sortedData = [...tableData].sort((a, b) => {\r\n            if (a.tableInfo[key] < b.tableInfo[key]) return -1;\r\n            if (a.tableInfo[key] > b.tableInfo[key]) return 1;\r\n            return 0;\r\n        });\r\n        setTableData(sortedData);\r\n    };\r\n\r\n\r\n    const loadLinksData = useCallback(async (category, links) => {\r\n        setError(null);\r\n        try {\r\n            const data = await dispatch(fetchLinksDataEpic(category, links));\r\n            return data;\r\n        } catch (err) {\r\n            setError(err.message)\r\n        }\r\n    }, [dispatch]);\r\n\r\n    const onClickListLinks = async (category, links) => {\r\n        setIsLoading(true);\r\n        loadLinksData(category, links).then((data) => {\r\n            setCategory(category);\r\n            setCategoryData(data);\r\n            setPaginationInfo(null);\r\n            dispatch(storeSearch(''));\r\n            setIsLoading(false);\r\n        });\r\n    }\r\n\r\n    const loadData = useCallback(async (identifier, params) => {\r\n        setError(null);\r\n        try {\r\n            await dispatch(fetchDataEpic(identifier, params));\r\n        } catch (err) {\r\n            setError(err.message)\r\n        }\r\n    }, [dispatch]);\r\n\r\n    const onChangeList = (page) => {\r\n        setIsLoading(true);\r\n        loadData(identifier, { page }).then(() => setIsLoading(false))\r\n    };\r\n\r\n    useEffect(() => {\r\n        setTableData(null);\r\n        setCategory(identifier);\r\n        setIsLoading(true);\r\n        loadData(identifier, { search }).then(() => setIsLoading(false))\r\n    }, [loadData, dispatch, identifier, search]);\r\n\r\n    useEffect(() => {\r\n        if (categoryData) {\r\n            const data = categoryData.map((item) => {\r\n                const tableInfo = convertTableInfo(category, item);\r\n                return {\r\n                    id: item.url,\r\n                    tableInfo\r\n                }\r\n            });\r\n            setTableData(data);\r\n        };\r\n    }, [categoryData, category]);\r\n\r\n    useEffect(() => {\r\n        if (categoriesData && categoriesData[identifier]) {\r\n            setCategoryData(categoriesData[identifier].results);\r\n            setPaginationInfo({\r\n                count: categoriesData[identifier].count,\r\n                next: categoriesData[identifier].next,\r\n                previous: categoriesData[identifier].previous\r\n            });\r\n        }\r\n    }, [categoriesData, identifier]);\r\n\r\n    if (error) {\r\n        return (<div>\r\n            <h2>An error occurred!</h2>\r\n            <p>{error}</p>\r\n            <Button onClick={loadData.bind(this, identifier)}>Load Data Again</Button>\r\n        </div>)\r\n    };\r\n\r\n    if (isLoading) {\r\n        return <Spinner />;\r\n    };\r\n\r\n    return (\r\n        <div className=\"page-view\">\r\n            {tableData ?\r\n                <Table {...{\r\n                    tableData,\r\n                    onViewDetails,\r\n                    onChangeList,\r\n                    category,\r\n                    paginationInfo,\r\n                    sortTableByKey\r\n                }}\r\n                /> :\r\n                <Spinner />}\r\n            {detailInfo && <DetailInfo {...{ detailInfo, onClickListLinks }} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(PageView);","import React from 'react';\r\nimport PageView from '../containers/PageView';\r\n\r\nimport setIdentifier from '../utils/setIdentifier';\r\n\r\nconst Films = ({ match }) => {\r\n    const { path, url } = match;\r\n    const identifier = setIdentifier(path);\r\n    return (\r\n        <PageView {...{ url, identifier }} />\r\n    );\r\n};\r\n\r\nexport default Films;","import React from 'react';\r\nimport PageView from '../containers/PageView';\r\n\r\nimport setIdentifier from '../utils/setIdentifier';\r\n\r\nconst People = ({ match }) => {\r\n    const { path, url } = match;\r\n    const identifier = setIdentifier(path);\r\n\r\n    return (\r\n        <PageView {...{ url, identifier }} />\r\n    );\r\n}\r\nexport default People;","import React from 'react';\r\n\r\nimport PageView from '../containers/PageView';\r\nimport setIdentifier from '../utils/setIdentifier';\r\n\r\nconst Planets = ({ match }) => {\r\n    const { path, url } = match;\r\n    const identifier = setIdentifier(path);\r\n    return (\r\n        <PageView {...{ url, identifier }} />\r\n    );\r\n};\r\n\r\nexport default Planets;","import React from 'react';\r\n\r\nimport PageView from '../containers/PageView';\r\nimport setIdentifier from '../utils/setIdentifier';\r\n\r\nconst Species = ({ match }) => {\r\n    const { path, url } = match;\r\n    const identifier = setIdentifier(path);\r\n    return (\r\n        <PageView {...{ url, identifier }} />\r\n    );\r\n};\r\n\r\nexport default Species;","import React from 'react';\r\n\r\nimport PageView from '../containers/PageView';\r\nimport setIdentifier from '../utils/setIdentifier';\r\n\r\nconst StarShips = ({ match }) => {\r\n    const { path, url } = match;\r\n    const identifier = setIdentifier(path);\r\n    return (\r\n        <PageView {...{ url, identifier }} />\r\n    );\r\n};\r\n\r\nexport default StarShips;","import React from 'react';\r\n\r\nimport PageView from '../containers/PageView';\r\nimport setIdentifier from '../utils/setIdentifier';\r\n\r\nconst Vehicles = ({ match }) => {\r\n    const { path, url } = match;\r\n    const identifier = setIdentifier(path);\r\n    return (\r\n        <PageView {...{ url, identifier }} />\r\n    );\r\n};\r\n\r\nexport default Vehicles;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Home from '../components/Home';\r\nimport Films from '../components/Films';\r\nimport People from '../components/People';\r\nimport Planets from '../components/Planets';\r\nimport Species from '../components/Species';\r\nimport Starships from '../components/Starships';\r\nimport Vehicles from '../components/Vehicles';\r\n\r\nexport default () => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/home\" component={Home} />\r\n        <Route path=\"/films\" component={Films} />\r\n        <Route path=\"/people\" component={People} />\r\n        <Route path=\"/planets\" component={Planets} />\r\n        <Route path=\"/species\" component={Species} />\r\n        <Route path=\"/starships\" component={Starships} />\r\n        <Route path=\"/vehicles\" component={Vehicles} />\r\n    </Switch>\r\n\r\n);\r\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchCategoriesEpic } from '../store/actions/categoriesActions';\nimport Header from '../components/Header';\nimport Router from '../router/router';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const categories = useSelector(({ categories }) => categories.categories);\n  const dispatch = useDispatch();\n\n  const loadCategories = useCallback(async () => {\n    setError(null);\n    try {\n      await dispatch(fetchCategoriesEpic());\n    } catch (err) {\n      setError(err.message)\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    loadCategories().then(() => setIsLoading(false));\n  }, [loadCategories]);\n\n  if (error) {\n    return (<div>\n      <h2>An error occurred!</h2>\n      <button title='Load Categories' onClick={loadCategories} />\n    </div>)\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div className=\"App\">\n      <Header {...{ categories }} />\n      <div className=\"container-fluid content\">\n        <Router />\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { STORE_CATEGORIES, STORE_DATA, STORE_LINK_DATA } from '../actions/categoriesActions';\r\n\r\nconst initialState = {\r\n    categories: null,\r\n    data: null,\r\n    linksData: null\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case STORE_CATEGORIES:\r\n            return {\r\n                ...state,\r\n                categories: payload\r\n            };\r\n        case STORE_DATA:\r\n            return {\r\n                ...state,\r\n                data: {\r\n                    ...state.data,\r\n                    [payload.category]: payload.data\r\n                }\r\n            };\r\n        case STORE_LINK_DATA:\r\n            return {\r\n                ...state,\r\n                linksData: {\r\n                    ...state.linksData,\r\n                    [payload.category]: payload.data\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n};","import { STORE_SEARCH } from '../actions/searchActions';\r\n\r\nconst initialState = {\r\n    search: ''\r\n}\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case STORE_SEARCH:\r\n            return {\r\n                ...state,\r\n                search: payload\r\n            };\r\n        default:\r\n            return state;\r\n    };\r\n};","import { STORE_URL_DATA } from '../actions/urlDataActions';\r\n\r\nconst initialState = {\r\n    people: {},\r\n    planets: {},\r\n    films: {},\r\n    species: {},\r\n    vehicles: {},\r\n    starships: {},\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case STORE_URL_DATA:\r\n            const { category, id, data } = payload;\r\n            return {\r\n                ...state,\r\n                [category]: {\r\n                    ...state[category],\r\n                    [id]: data\r\n                },\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport categoriesReducer from './reducers/categoriesReducer';\r\nimport searchReducer from './reducers/searchReducer';\r\nimport urlDataInReducer from './reducers/urlDataReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    categories: categoriesReducer,\r\n    search: searchReducer,\r\n    urlData: urlDataInReducer\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport './styles/index.scss';\n\nif (process.env.NODE_ENV !== 'production') {\n  const { whyDidYouUpdate } = require('why-did-you-update')\n  whyDidYouUpdate(React)\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider {...{ store }} >\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}